{"version":3,"sources":["Components/Gallery.js","Components/Navigation.js","Components/Header.js","serviceWorker.js","index.js","App.js"],"names":["Gallery","_ref","galleryData","react_default","a","createElement","id","className","image_gallery_default","useBrowserFullscreen","thumbnailPosition","items","pictures","map","picture","original","concat","name","thumbnail","thumbnailLabel","description","Navigation","href","title","Header","data","Navigation_Navigation","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","setData","fetchDataAsync","asyncToGenerator","regenerator_default","mark","_callee","request","json","wrap","_context","prev","next","fetch","sent","stop","apply","this","arguments","useEffect","Header_Header","main","Gallery_Gallery","gallery","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8f8e43f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ImageGallery from 'react-image-gallery';\r\n\r\nimport 'react-image-gallery/styles/css/image-gallery.css';\r\n\r\nconst Gallery = ({ galleryData }) => (\r\n  <section id='gallery'>\r\n    <div className='container'>\r\n      <ImageGallery\r\n        useBrowserFullscreen='true'\r\n        thumbnailPosition='left'\r\n        items={galleryData.pictures.map(picture => ({\r\n          original: `./images/${picture.name}`,\r\n          thumbnail: `./images/${picture.name}`,\r\n          thumbnailLabel: picture.description\r\n        }))}\r\n      />\r\n    </div>\r\n  </section>\r\n);\r\n\r\nexport { Gallery };\r\n","import React from 'react';\r\n\r\nconst Navigation = () => (\r\n  <nav id='nav-wrap'>\r\n    <a className='mobile-btn' href='#nav-wrap' title='Show navigation'>\r\n      Show navigation\r\n    </a>\r\n    <a className='mobile-btn' href='#home' title='Hide navigation'>\r\n      Hide navigation\r\n    </a>\r\n\r\n    <ul id='nav' className='nav'>\r\n      <li className='current'>\r\n        <a className='smoothscroll' href='#home'>\r\n          Home\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a className='smoothscroll' href='#gallery'>\r\n          Gallery\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport { Navigation };\r\n","import React from 'react';\r\nimport { Navigation } from './Navigation';\r\n\r\nconst Header = ({ data }) => {\r\n  if (!data) return <header id='home' />;\r\n\r\n  const { name, description } = data;\r\n\r\n  return (\r\n    <header id='home'>\r\n      <Navigation />\r\n      <div className='row banner'>\r\n        <div className='banner-text'>\r\n          <h1 className='responsive-headline'>{name}</h1>\r\n          <h3>\r\n            <span>{description}</span>\r\n          </h3>\r\n          <hr />\r\n          <ul className='social'>Broskvička Bofinka Bofík</ul>\r\n        </div>\r\n      </div>\r\n\r\n      <p className='scrolldown'>\r\n        <a className='smoothscroll' href='#gallery'>\r\n          <i className='icon-down-circle' />\r\n        </a>\r\n      </p>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport { Header };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react';\r\nimport { Gallery } from './Components/Gallery';\r\nimport { Header } from './Components/Header';\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState(null);\r\n\r\n  const fetchDataAsync = async () => {\r\n    const request = await fetch('./data.json');\r\n    var json = await request.json();\r\n\r\n    setData(json);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDataAsync();\r\n  }, []);\r\n\r\n  if (!data) return <div className='App'><Header /></div>;\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Header data={data.main} />\r\n      <Gallery galleryData={data.gallery} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { App };\r\n"],"sourceRoot":""}